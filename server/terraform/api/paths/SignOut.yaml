post:
  description: Expires all of the refresh tokens within AWS cognito for this account, forcing user to re-login on previously authenticated devices
  summary: Expires the refresh tokens for the account (current JWT token will remain valid until expiry)
  responses:
    "200":
      description: Returned when vuser has been successfully logged out
      content:
        application/json:
          schema:
            $ref: "./../definitions/SignOutResponse.yaml"
          example: { "signed_out": true }
    "401":
      $ref: "./../generic/CognitoUnauthorized.yaml"
    "500":
      $ref: "./../generic/InternalServerError.yaml"
  parameters: []
  x-amazon-apigateway-integration:
    uri: ${signOut_lambda_arn}
    passthroughBehavior: "when_no_match"
    httpMethod: "POST"
    type: "aws_proxy"
  tags:
    - Auth

  requestBody:
    content:
      application/json:
        schema:
          $ref: "./../definitions/SignOutRequest.yaml"

  security:
    - authorizer: []

options:
  summary: CORS support
  tags:
    - Auth
  description: |
    Enable CORS by returning correct headers
  x-amazon-apigateway-integration:
    type: mock
    requestTemplates:
      application/json: |
        {
          "statusCode" : 200
        }
    responses:
      "default":
        statusCode: "200"
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
          method.response.header.Access-Control-Allow-Methods: "'*'"
          method.response.header.Access-Control-Allow-Origin: "'*'"
        responseTemplates:
          application/json: |
            {}
  responses:
    200:
      description: Default response for CORS method
      headers:
        Access-Control-Allow-Origin:
          schema:
            type: string
        Access-Control-Allow-Methods:
          schema:
            type: string
        Access-Control-Allow-Headers:
          schema:
            type: string
